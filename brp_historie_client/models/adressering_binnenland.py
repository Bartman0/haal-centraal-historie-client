# coding: utf-8

"""
    BRP historie bevragen

    API voor het zoeken en raadplegen van historische verblijfplaatsen, partners, nationaliteiten en verblijfstitels uit de BRP (inclusief de RNI).  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-historie-bevragen/tree/v1.0.0/features) voor nadere toelichting. 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from brp_historie_client.models.adressering_binnenland_in_onderzoek import AdresseringBinnenlandInOnderzoek
from typing import Optional, Set
from typing_extensions import Self

class AdresseringBinnenland(BaseModel):
    """
    AdresseringBinnenland
    """ # noqa: E501
    adresregel1: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="Het eerste deel van een adres is een combinatie van de straat en huisnummer. ")
    adresregel2: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Het tweede deel van een adres is een combinatie van woonplaats eventueel in combinatie met de postcode. ")
    in_onderzoek: Optional[AdresseringBinnenlandInOnderzoek] = Field(default=None, alias="inOnderzoek")
    __properties: ClassVar[List[str]] = ["adresregel1", "adresregel2", "inOnderzoek"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdresseringBinnenland from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of in_onderzoek
        if self.in_onderzoek:
            _dict['inOnderzoek'] = self.in_onderzoek.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdresseringBinnenland from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adresregel1": obj.get("adresregel1"),
            "adresregel2": obj.get("adresregel2"),
            "inOnderzoek": AdresseringBinnenlandInOnderzoek.from_dict(obj["inOnderzoek"]) if obj.get("inOnderzoek") is not None else None
        })
        return _obj


