# coding: utf-8

"""
    BRP historie bevragen

    API voor het zoeken en raadplegen van historische verblijfplaatsen, partners, nationaliteiten en verblijfstitels uit de BRP (inclusief de RNI).  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-historie-bevragen/tree/v1.0.0/features) voor nadere toelichting. 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from brp_historie_client.models.invalid_params import InvalidParams
from typing import Optional, Set
from typing_extensions import Self

class BadRequestFoutbericht(BaseModel):
    """
    BadRequestFoutbericht
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Link naar meer informatie over deze fout")
    title: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Beschrijving van de fout")
    status: Optional[Annotated[int, Field(le=600, strict=True, ge=100)]] = Field(default=None, description="Http status code")
    detail: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Details over de fout")
    instance: Optional[StrictStr] = Field(default=None, description="Uri van de aanroep die de fout heeft veroorzaakt")
    code: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Systeemcode die het type fout aangeeft")
    invalid_params: Optional[List[InvalidParams]] = Field(default=None, description="Foutmelding per fout in een parameter. Alle gevonden fouten worden één keer teruggemeld.", alias="invalidParams")
    __properties: ClassVar[List[str]] = ["type", "title", "status", "detail", "instance", "code", "invalidParams"]

    @field_validator('title')
    def title_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9À-ž \.\-]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9À-ž \.\-]{1,80}$/")
        return value

    @field_validator('detail')
    def detail_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9À-ž \.\-\(\)\,]{1,200}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9À-ž \.\-\(\)\,]{1,200}$/")
        return value

    @field_validator('code')
    def code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{1,25}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{1,25}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BadRequestFoutbericht from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_params (list)
        _items = []
        if self.invalid_params:
            for _item_invalid_params in self.invalid_params:
                if _item_invalid_params:
                    _items.append(_item_invalid_params.to_dict())
            _dict['invalidParams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BadRequestFoutbericht from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "status": obj.get("status"),
            "detail": obj.get("detail"),
            "instance": obj.get("instance"),
            "code": obj.get("code"),
            "invalidParams": [InvalidParams.from_dict(_item) for _item in obj["invalidParams"]] if obj.get("invalidParams") is not None else None
        })
        return _obj


